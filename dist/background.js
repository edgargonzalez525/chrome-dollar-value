!function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=14)}({14:function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(15),o=0,i=[{code:"CLP",url:function(){return"https://www.valor-dolar.cl/currencies_rates.json"},image:"chile.png",parseResponse:function(e){var r=this;return new Promise(function(t){t(Number(e.currencies.find(function(e){return e.code===r.code}).rate))})}}][0];function a(){return new Promise(function(e){(function(){var e=i.url(),r=new Request(e);return fetch(r).then(function(e){return e.json()}).then(function(e){return i.parseResponse(e)})})().then(function(r){var t=r;chrome.browserAction.setBadgeBackgroundColor({color:[0,0,0,20]}),chrome.browserAction.setBadgeText({text:function(e){var r=n(e).format("0.00");return r.length<=4?r:(r=Math.floor(e).toString()).length<=4?r:(r=n(e).format("0.0a")).length<=4?r:n(e).format("0a")}(t)}),console.log(t,o,t!==o),t!==o&&new Notification("Dollar Value Changed",{body:t.toString()}),e(o=t)}).catch(function(e){console.error(e)})})}chrome.alarms.create("updateDollar",{periodInMinutes:30}),chrome.alarms.onAlarm.addListener(function(){a()}),a(),function(e){var r=document.createElement("canvas").getContext("2d"),t=new Image,n=new Image;t.src="images/flags/"+e.image,t.onload=function(){r.drawImage(t,0,0,16,16),n.src="images/dollar-sign.png",n.onload=function(){r.drawImage(n,0,0,16,16),chrome.browserAction.setIcon({imageData:r.getImageData(0,0,16,16)})}}}(i),chrome.extension.onConnect.addListener(function(e){console.log("Connected ....."),e.onMessage.addListener(function(r){"getDollarValue"===r.type&&a().then(function(r){e.postMessage({type:"setDollarValue",value:r})})})})},15:function(e,r,t){var n,o;
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */void 0===(o="function"==typeof(n=function(){var e,r,t={},n={},o={currentLocale:"en",zeroFormat:null,nullFormat:null,defaultFormat:"0,0",scalePercentBy100:!0},i={currentLocale:o.currentLocale,zeroFormat:o.zeroFormat,nullFormat:o.nullFormat,defaultFormat:o.defaultFormat,scalePercentBy100:o.scalePercentBy100};function a(e,r){this._input=e,this._value=r}return(e=function(n){var o,l,u,c;if(e.isNumeral(n))o=n.value();else if(0===n||void 0===n)o=0;else if(null===n||r.isNaN(n))o=null;else if("string"==typeof n)if(i.zeroFormat&&n===i.zeroFormat)o=0;else if(i.nullFormat&&n===i.nullFormat||!n.replace(/[^0-9]+/g,"").length)o=null;else{for(l in t)if((c="function"==typeof t[l].regexps.unformat?t[l].regexps.unformat():t[l].regexps.unformat)&&n.match(c)){u=t[l].unformat;break}o=(u=u||e._.stringToNumber)(n)}else o=Number(n)||null;return new a(n,o)}).version="2.0.6",e.isNumeral=function(e){return e instanceof a},e._=r={numberToFormat:function(r,t,o){var i,a,l,u,c,s,f,m,d=n[e.options.currentLocale],h=!1,b=!1,p="",g="",v=!1;if(r=r||0,l=Math.abs(r),e._.includes(t,"(")?(h=!0,t=t.replace(/[\(|\)]/g,"")):(e._.includes(t,"+")||e._.includes(t,"-"))&&(s=e._.includes(t,"+")?t.indexOf("+"):r<0?t.indexOf("-"):-1,t=t.replace(/[\+|\-]/g,"")),e._.includes(t,"a")&&(a=!!(a=t.match(/a(k|m|b|t)?/))&&a[1],e._.includes(t," a")&&(p=" "),t=t.replace(new RegExp(p+"a[kmbt]?"),""),l>=1e12&&!a||"t"===a?(p+=d.abbreviations.trillion,r/=1e12):l<1e12&&l>=1e9&&!a||"b"===a?(p+=d.abbreviations.billion,r/=1e9):l<1e9&&l>=1e6&&!a||"m"===a?(p+=d.abbreviations.million,r/=1e6):(l<1e6&&l>=1e3&&!a||"k"===a)&&(p+=d.abbreviations.thousand,r/=1e3)),e._.includes(t,"[.]")&&(b=!0,t=t.replace("[.]",".")),u=r.toString().split(".")[0],c=t.split(".")[1],f=t.indexOf(","),i=(t.split(".")[0].split(",")[0].match(/0/g)||[]).length,c?(e._.includes(c,"[")?(c=(c=c.replace("]","")).split("["),g=e._.toFixed(r,c[0].length+c[1].length,o,c[1].length)):g=e._.toFixed(r,c.length,o),u=g.split(".")[0],g=e._.includes(g,".")?d.delimiters.decimal+g.split(".")[1]:"",b&&0===Number(g.slice(1))&&(g="")):u=e._.toFixed(r,0,o),p&&!a&&Number(u)>=1e3&&p!==d.abbreviations.trillion)switch(u=String(Number(u)/1e3),p){case d.abbreviations.thousand:p=d.abbreviations.million;break;case d.abbreviations.million:p=d.abbreviations.billion;break;case d.abbreviations.billion:p=d.abbreviations.trillion}if(e._.includes(u,"-")&&(u=u.slice(1),v=!0),u.length<i)for(var _=i-u.length;_>0;_--)u="0"+u;return f>-1&&(u=u.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+d.delimiters.thousands)),0===t.indexOf(".")&&(u=""),m=u+g+(p||""),h?m=(h&&v?"(":"")+m+(h&&v?")":""):s>=0?m=0===s?(v?"-":"+")+m:m+(v?"-":"+"):v&&(m="-"+m),m},stringToNumber:function(e){var r,t,o,a=n[i.currentLocale],l=e,u={thousand:3,million:6,billion:9,trillion:12};if(i.zeroFormat&&e===i.zeroFormat)t=0;else if(i.nullFormat&&e===i.nullFormat||!e.replace(/[^0-9]+/g,"").length)t=null;else{for(r in t=1,"."!==a.delimiters.decimal&&(e=e.replace(/\./g,"").replace(a.delimiters.decimal,".")),u)if(o=new RegExp("[^a-zA-Z]"+a.abbreviations[r]+"(?:\\)|(\\"+a.currency.symbol+")?(?:\\))?)?$"),l.match(o)){t*=Math.pow(10,u[r]);break}t*=(e.split("-").length+Math.min(e.split("(").length-1,e.split(")").length-1))%2?1:-1,e=e.replace(/[^0-9\.]+/g,""),t*=Number(e)}return t},isNaN:function(e){return"number"==typeof e&&isNaN(e)},includes:function(e,r){return-1!==e.indexOf(r)},insert:function(e,r,t){return e.slice(0,t)+r+e.slice(t)},reduce:function(e,r){if(null===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof r)throw new TypeError(r+" is not a function");var t,n=Object(e),o=n.length>>>0,i=0;if(3===arguments.length)t=arguments[2];else{for(;i<o&&!(i in n);)i++;if(i>=o)throw new TypeError("Reduce of empty array with no initial value");t=n[i++]}for(;i<o;i++)i in n&&(t=r(t,n[i],i,n));return t},multiplier:function(e){var r=e.toString().split(".");return r.length<2?1:Math.pow(10,r[1].length)},correctionFactor:function(){return Array.prototype.slice.call(arguments).reduce(function(e,t){var n=r.multiplier(t);return e>n?e:n},1)},toFixed:function(e,r,t,n){var o,i,a,l,u=e.toString().split("."),c=r-(n||0);return o=2===u.length?Math.min(Math.max(u[1].length,c),r):c,a=Math.pow(10,o),l=(t(e+"e+"+o)/a).toFixed(o),n>r-o&&(i=new RegExp("\\.?0{1,"+(n-(r-o))+"}$"),l=l.replace(i,"")),l}},e.options=i,e.formats=t,e.locales=n,e.locale=function(e){return e&&(i.currentLocale=e.toLowerCase()),i.currentLocale},e.localeData=function(e){if(!e)return n[i.currentLocale];if(e=e.toLowerCase(),!n[e])throw new Error("Unknown locale : "+e);return n[e]},e.reset=function(){for(var e in o)i[e]=o[e]},e.zeroFormat=function(e){i.zeroFormat="string"==typeof e?e:null},e.nullFormat=function(e){i.nullFormat="string"==typeof e?e:null},e.defaultFormat=function(e){i.defaultFormat="string"==typeof e?e:"0.0"},e.register=function(e,r,t){if(r=r.toLowerCase(),this[e+"s"][r])throw new TypeError(r+" "+e+" already registered.");return this[e+"s"][r]=t,t},e.validate=function(r,t){var n,o,i,a,l,u,c,s;if("string"!=typeof r&&(r+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",r)),(r=r.trim()).match(/^\d+$/))return!0;if(""===r)return!1;try{c=e.localeData(t)}catch(r){c=e.localeData(e.locale())}return i=c.currency.symbol,l=c.abbreviations,n=c.delimiters.decimal,o="."===c.delimiters.thousands?"\\.":c.delimiters.thousands,!(null!==(s=r.match(/^[^\d]+/))&&(r=r.substr(1),s[0]!==i)||null!==(s=r.match(/[^\d]+$/))&&(r=r.slice(0,-1),s[0]!==l.thousand&&s[0]!==l.million&&s[0]!==l.billion&&s[0]!==l.trillion)||(u=new RegExp(o+"{2}"),r.match(/[^\d.,]/g)||(a=r.split(n)).length>2||(a.length<2?!a[0].match(/^\d+.*\d$/)||a[0].match(u):1===a[0].length?!a[0].match(/^\d+$/)||a[0].match(u)||!a[1].match(/^\d+$/):!a[0].match(/^\d+.*\d$/)||a[0].match(u)||!a[1].match(/^\d+$/))))},e.fn=a.prototype={clone:function(){return e(this)},format:function(r,n){var o,a,l,u=this._value,c=r||i.defaultFormat;if(n=n||Math.round,0===u&&null!==i.zeroFormat)a=i.zeroFormat;else if(null===u&&null!==i.nullFormat)a=i.nullFormat;else{for(o in t)if(c.match(t[o].regexps.format)){l=t[o].format;break}a=(l=l||e._.numberToFormat)(u,c,n)}return a},value:function(){return this._value},input:function(){return this._input},set:function(e){return this._value=Number(e),this},add:function(e){var t=r.correctionFactor.call(null,this._value,e);return this._value=r.reduce([this._value,e],function(e,r,n,o){return e+Math.round(t*r)},0)/t,this},subtract:function(e){var t=r.correctionFactor.call(null,this._value,e);return this._value=r.reduce([e],function(e,r,n,o){return e-Math.round(t*r)},Math.round(this._value*t))/t,this},multiply:function(e){return this._value=r.reduce([this._value,e],function(e,t,n,o){var i=r.correctionFactor(e,t);return Math.round(e*i)*Math.round(t*i)/Math.round(i*i)},1),this},divide:function(e){return this._value=r.reduce([this._value,e],function(e,t,n,o){var i=r.correctionFactor(e,t);return Math.round(e*i)/Math.round(t*i)}),this},difference:function(r){return Math.abs(e(this._value).subtract(r).value())}},e.register("locale","en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var r=e%10;return 1==~~(e%100/10)?"th":1===r?"st":2===r?"nd":3===r?"rd":"th"},currency:{symbol:"$"}}),e.register("format","bps",{regexps:{format:/(BPS)/,unformat:/(BPS)/},format:function(r,t,n){var o,i=e._.includes(t," BPS")?" ":"";return r*=1e4,t=t.replace(/\s?BPS/,""),o=e._.numberToFormat(r,t,n),e._.includes(o,")")?((o=o.split("")).splice(-1,0,i+"BPS"),o=o.join("")):o=o+i+"BPS",o},unformat:function(r){return+(1e-4*e._.stringToNumber(r)).toFixed(15)}}),function(){var r={base:1e3,suffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]},t={base:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},n=r.suffixes.concat(t.suffixes.filter(function(e){return r.suffixes.indexOf(e)<0})).join("|");n="("+n.replace("B","B(?!PS)")+")",e.register("format","bytes",{regexps:{format:/([0\s]i?b)/,unformat:new RegExp(n)},format:function(n,o,i){var a,l,u,c=e._.includes(o,"ib")?t:r,s=e._.includes(o," b")||e._.includes(o," ib")?" ":"";for(o=o.replace(/\s?i?b/,""),a=0;a<=c.suffixes.length;a++)if(l=Math.pow(c.base,a),u=Math.pow(c.base,a+1),null===n||0===n||n>=l&&n<u){s+=c.suffixes[a],l>0&&(n/=l);break}return e._.numberToFormat(n,o,i)+s},unformat:function(n){var o,i,a=e._.stringToNumber(n);if(a){for(o=r.suffixes.length-1;o>=0;o--){if(e._.includes(n,r.suffixes[o])){i=Math.pow(r.base,o);break}if(e._.includes(n,t.suffixes[o])){i=Math.pow(t.base,o);break}}a*=i||1}return a}})}(),e.register("format","currency",{regexps:{format:/(\$)/},format:function(r,t,n){var o,i,a=e.locales[e.options.currentLocale],l={before:t.match(/^([\+|\-|\(|\s|\$]*)/)[0],after:t.match(/([\+|\-|\)|\s|\$]*)$/)[0]};for(t=t.replace(/\s?\$\s?/,""),o=e._.numberToFormat(r,t,n),r>=0?(l.before=l.before.replace(/[\-\(]/,""),l.after=l.after.replace(/[\-\)]/,"")):r<0&&!e._.includes(l.before,"-")&&!e._.includes(l.before,"(")&&(l.before="-"+l.before),i=0;i<l.before.length;i++)switch(l.before[i]){case"$":o=e._.insert(o,a.currency.symbol,i);break;case" ":o=e._.insert(o," ",i+a.currency.symbol.length-1)}for(i=l.after.length-1;i>=0;i--)switch(l.after[i]){case"$":o=i===l.after.length-1?o+a.currency.symbol:e._.insert(o,a.currency.symbol,-(l.after.length-(1+i)));break;case" ":o=i===l.after.length-1?o+" ":e._.insert(o," ",-(l.after.length-(1+i)+a.currency.symbol.length-1))}return o}}),e.register("format","exponential",{regexps:{format:/(e\+|e-)/,unformat:/(e\+|e-)/},format:function(r,t,n){var o=("number"!=typeof r||e._.isNaN(r)?"0e+0":r.toExponential()).split("e");return t=t.replace(/e[\+|\-]{1}0/,""),e._.numberToFormat(Number(o[0]),t,n)+"e"+o[1]},unformat:function(r){var t=e._.includes(r,"e+")?r.split("e+"):r.split("e-"),n=Number(t[0]),o=Number(t[1]);return o=e._.includes(r,"e-")?o*=-1:o,e._.reduce([n,Math.pow(10,o)],function(r,t,n,o){var i=e._.correctionFactor(r,t);return r*i*(t*i)/(i*i)},1)}}),e.register("format","ordinal",{regexps:{format:/(o)/},format:function(r,t,n){var o=e.locales[e.options.currentLocale],i=e._.includes(t," o")?" ":"";return t=t.replace(/\s?o/,""),i+=o.ordinal(r),e._.numberToFormat(r,t,n)+i}}),e.register("format","percentage",{regexps:{format:/(%)/,unformat:/(%)/},format:function(r,t,n){var o,i=e._.includes(t," %")?" ":"";return e.options.scalePercentBy100&&(r*=100),t=t.replace(/\s?\%/,""),o=e._.numberToFormat(r,t,n),e._.includes(o,")")?((o=o.split("")).splice(-1,0,i+"%"),o=o.join("")):o=o+i+"%",o},unformat:function(r){var t=e._.stringToNumber(r);return e.options.scalePercentBy100?.01*t:t}}),e.register("format","time",{regexps:{format:/(:)/,unformat:/(:)/},format:function(e,r,t){var n=Math.floor(e/60/60),o=Math.floor((e-60*n*60)/60),i=Math.round(e-60*n*60-60*o);return n+":"+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)},unformat:function(e){var r=e.split(":"),t=0;return 3===r.length?(t+=60*Number(r[0])*60,t+=60*Number(r[1]),t+=Number(r[2])):2===r.length&&(t+=60*Number(r[0]),t+=Number(r[1])),Number(t)}}),e})?n.call(r,t,r,e):n)||(e.exports=o)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL251bWVyYWwvbnVtZXJhbC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm51bWVyYWwiLCJkb2xsYXJWYWx1ZSIsInNlbGVjdGVkQ291bnRyeSIsImNvZGUiLCJ1cmwiLCJpbWFnZSIsInBhcnNlUmVzcG9uc2UiLCJyZXNwb25zZSIsIl90aGlzIiwidGhpcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiTnVtYmVyIiwiY3VycmVuY2llcyIsImZpbmQiLCJjdXJyZW5jeSIsInJhdGUiLCJ1cGRhdGVEb2xsYXJWYWx1ZSIsIm15UmVxdWVzdCIsIlJlcXVlc3QiLCJmZXRjaCIsInRoZW4iLCJqc29uIiwiZ2V0RG9sbGFyVmFsdWUiLCJuZXdEb2xsYXJWYWx1ZSIsImNocm9tZSIsImJyb3dzZXJBY3Rpb24iLCJzZXRCYWRnZUJhY2tncm91bmRDb2xvciIsImNvbG9yIiwic2V0QmFkZ2VUZXh0IiwidGV4dCIsImZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0IiwibGVuZ3RoIiwiTWF0aCIsImZsb29yIiwidG9TdHJpbmciLCJnZXRCYWRnZVRleHQiLCJjb25zb2xlIiwibG9nIiwiTm90aWZpY2F0aW9uIiwiYm9keSIsImNhdGNoIiwiZSIsImVycm9yIiwiYWxhcm1zIiwicGVyaW9kSW5NaW51dGVzIiwib25BbGFybSIsImFkZExpc3RlbmVyIiwiY291bnRyeSIsImN0eCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJpbWFnZU9iajEiLCJJbWFnZSIsImltYWdlT2JqMiIsInNyYyIsIm9ubG9hZCIsImRyYXdJbWFnZSIsInNldEljb24iLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJzZXRCYWRnZUljb24iLCJleHRlbnNpb24iLCJvbkNvbm5lY3QiLCJwb3J0Iiwib25NZXNzYWdlIiwibXNnIiwidHlwZSIsInBvc3RNZXNzYWdlIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJ1bmRlZmluZWQiLCJfIiwiZm9ybWF0cyIsImxvY2FsZXMiLCJkZWZhdWx0cyIsImN1cnJlbnRMb2NhbGUiLCJ6ZXJvRm9ybWF0IiwibnVsbEZvcm1hdCIsImRlZmF1bHRGb3JtYXQiLCJzY2FsZVBlcmNlbnRCeTEwMCIsIm9wdGlvbnMiLCJOdW1lcmFsIiwiaW5wdXQiLCJudW1iZXIiLCJfaW5wdXQiLCJfdmFsdWUiLCJraW5kIiwidW5mb3JtYXRGdW5jdGlvbiIsInJlZ2V4cCIsImlzTnVtZXJhbCIsImlzTmFOIiwicmVwbGFjZSIsInJlZ2V4cHMiLCJ1bmZvcm1hdCIsIm1hdGNoIiwic3RyaW5nVG9OdW1iZXIiLCJ2ZXJzaW9uIiwib2JqIiwibnVtYmVyVG9Gb3JtYXQiLCJyb3VuZGluZ0Z1bmN0aW9uIiwibGVhZGluZ0NvdW50IiwiYWJickZvcmNlIiwiYWJzIiwiaW50IiwicHJlY2lzaW9uIiwic2lnbmVkIiwidGhvdXNhbmRzIiwib3V0cHV0IiwibG9jYWxlIiwibmVnUCIsIm9wdERlYyIsImFiYnIiLCJkZWNpbWFsIiwibmVnIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwiUmVnRXhwIiwiYWJicmV2aWF0aW9ucyIsInRyaWxsaW9uIiwiYmlsbGlvbiIsIm1pbGxpb24iLCJ0aG91c2FuZCIsInNwbGl0IiwidG9GaXhlZCIsImRlbGltaXRlcnMiLCJzbGljZSIsIlN0cmluZyIsInN0cmluZyIsImFiYnJldmlhdGlvbiIsInN0cmluZ09yaWdpbmFsIiwic3ltYm9sIiwicG93IiwibWluIiwic2VhcmNoIiwiaW5zZXJ0Iiwic3ViU3RyaW5nIiwic3RhcnQiLCJyZWR1Y2UiLCJhcnJheSIsImNhbGxiYWNrIiwiVHlwZUVycm9yIiwibGVuIiwiayIsImFyZ3VtZW50cyIsIm11bHRpcGxpZXIiLCJ4IiwicGFydHMiLCJjb3JyZWN0aW9uRmFjdG9yIiwiQXJyYXkiLCJhY2N1bSIsIm5leHQiLCJtbiIsIm1heERlY2ltYWxzIiwib3B0aW9uYWxzIiwiYm91bmRlZFByZWNpc2lvbiIsIm9wdGlvbmFsc1JlZ0V4cCIsInBvd2VyIiwic3BsaXRWYWx1ZSIsIm1pbkRlY2ltYWxzIiwibWF4IiwidG9Mb3dlckNhc2UiLCJsb2NhbGVEYXRhIiwiRXJyb3IiLCJyZXNldCIsInJlZ2lzdGVyIiwidmFsaWRhdGUiLCJ2YWwiLCJjdWx0dXJlIiwiX2RlY2ltYWxTZXAiLCJfdGhvdXNhbmRTZXAiLCJfY3VyclN5bWJvbCIsIl92YWxBcnJheSIsIl9hYmJyT2JqIiwiX3Rob3VzYW5kUmVnRXgiLCJ0ZW1wIiwid2FybiIsInRyaW0iLCJzdWJzdHIiLCJmbiIsImNsb25lIiwiaW5wdXRTdHJpbmciLCJmb3JtYXRGdW5jdGlvbiIsInJvdW5kIiwic2V0IiwiYWRkIiwiY29yckZhY3RvciIsImN1cnIiLCJjdXJySSIsIk8iLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwiZGl2aWRlIiwiZGlmZmVyZW5jZSIsIm9yZGluYWwiLCJiIiwic3BhY2UiLCJzcGxpY2UiLCJqb2luIiwiYmFzZSIsInN1ZmZpeGVzIiwiYmluYXJ5IiwidW5mb3JtYXRSZWdleCIsImNvbmNhdCIsImZpbHRlciIsIml0ZW0iLCJieXRlcyIsInN1ZmZpeCIsImJ5dGVzTXVsdGlwbGllciIsInN5bWJvbHMiLCJiZWZvcmUiLCJhZnRlciIsInRvRXhwb25lbnRpYWwiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwidGltZUFycmF5Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FB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TCxLQUFBQyxNQUFBbEQsRUFBQSxPQUNBdU8sRUFBQXRMLEtBQUFDLE9BQUFsRCxFQUFBLEdBQUFzTyxFQUFBLFFBQ0FFLEVBQUF2TCxLQUFBdUosTUFBQXhNLEVBQUEsR0FBQXNPLEVBQUEsTUFBQUMsR0FFQSxPQUFBRCxFQUFBLEtBQUFDLEVBQUEsT0FBQUEsS0FBQSxLQUFBQyxFQUFBLE9BQUFBLE1BRUF6SCxTQUFBLFNBQUFrQyxHQUNBLElBQUF3RixFQUFBeEYsRUFBQUwsTUFBQSxLQUNBNEYsRUFBQSxFQWdCQSxPQWJBLElBQUFDLEVBQUF6TCxRQUVBd0wsR0FBQSxHQUFBN00sT0FBQThNLEVBQUEsT0FFQUQsR0FBQSxHQUFBN00sT0FBQThNLEVBQUEsSUFFQUQsR0FBQTdNLE9BQUE4TSxFQUFBLEtBQ2EsSUFBQUEsRUFBQXpMLFNBRWJ3TCxHQUFBLEdBQUE3TSxPQUFBOE0sRUFBQSxJQUVBRCxHQUFBN00sT0FBQThNLEVBQUEsS0FFQTlNLE9BQUE2TSxNQUtBek4sSUF6K0JzQnVFLEVBQUFwRyxLQUFBTCxFQUFBRixFQUFBRSxFQUFBQyxHQUFBd0csS0FBQXhHLEVBQUFELFFBQUEwRyIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsImltcG9ydCAqIGFzIG51bWVyYWwgZnJvbSAnbnVtZXJhbCc7XG5cbmNvbnN0IHJlZnJlc2hNaW51dGVzID0gMzA7XG5sZXQgZG9sbGFyVmFsdWUgPSAwO1xuXG5pbnRlcmZhY2UgQ291bnRyeSB7XG4gIGNvZGU6IHN0cmluZztcbiAgdXJsOiAoKSA9PiBzdHJpbmc7XG4gIGltYWdlOiBzdHJpbmc7XG4gIHBhcnNlUmVzcG9uc2U6IChyZXNwb25zZSkgPT4gUHJvbWlzZTxudW1iZXI+O1xufVxuXG5jb25zdCBjb3VudHJpZXM6IENvdW50cnlbXSA9IFt7XG4gIGNvZGU6ICdDTFAnLFxuICB1cmw6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJ2h0dHBzOi8vd3d3LnZhbG9yLWRvbGFyLmNsL2N1cnJlbmNpZXNfcmF0ZXMuanNvbidcbiAgfSxcbiAgaW1hZ2U6ICdjaGlsZS5wbmcnLFxuICBwYXJzZVJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHJlc29sdmUoTnVtYmVyKHJlc3BvbnNlLmN1cnJlbmNpZXMuZmluZCgoY3VycmVuY3kpID0+IGN1cnJlbmN5LmNvZGUgPT09IHRoaXMuY29kZSkucmF0ZSkpO1xuICAgIH0pO1xuICB9LFxufV07XG5cbmxldCBzZWxlY3RlZENvdW50cnkgPSBjb3VudHJpZXNbMF07XG5cbmZ1bmN0aW9uIHNldEJhZGdlSWNvbihjb3VudHJ5OiBDb3VudHJ5KSB7XG4gIGNvbnN0IGM6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNvbnN0IGN0eCA9IGMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgY29uc3QgaW1hZ2VPYmoxID0gbmV3IEltYWdlKCk7XG4gIGNvbnN0IGltYWdlT2JqMiA9IG5ldyBJbWFnZSgpO1xuICBpbWFnZU9iajEuc3JjID0gYGltYWdlcy9mbGFncy8ke2NvdW50cnkuaW1hZ2V9YDtcbiAgaW1hZ2VPYmoxLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjdHguZHJhd0ltYWdlKGltYWdlT2JqMSwgMCwgMCwgMTYsIDE2KTtcbiAgICBpbWFnZU9iajIuc3JjID0gJ2ltYWdlcy9kb2xsYXItc2lnbi5wbmcnO1xuICAgIGltYWdlT2JqMi5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjdHguZHJhd0ltYWdlKGltYWdlT2JqMiwgMCwgMCwgMTYsIDE2KTtcblxuICAgICAgY2hyb21lLmJyb3dzZXJBY3Rpb24uc2V0SWNvbih7XG4gICAgICAgIGltYWdlRGF0YTogY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxNiwgMTYpLFxuICAgICAgfSlcbiAgICB9XG4gIH07XG59XG5cblxuZnVuY3Rpb24gZ2V0RG9sbGFyVmFsdWUoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgLy9jb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgY29uc3QgdXJsID0gc2VsZWN0ZWRDb3VudHJ5LnVybCgpO1xuICBjb25zdCBteVJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwpO1xuXG4gIHJldHVybiBmZXRjaChteVJlcXVlc3QpXG4gIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgLnRoZW4oanNvbiA9PiBzZWxlY3RlZENvdW50cnkucGFyc2VSZXNwb25zZShqc29uKSlcblxufVxuXG5mdW5jdGlvbiBnZXRCYWRnZVRleHQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gIGNvbnN0IG1heExlbmd0aCA9IDQ7XG4gIGxldCBmb3JtYXR0ZWRWYWx1ZSA9IG51bWVyYWwodmFsdWUpLmZvcm1hdCgnMC4wMCcpO1xuXG4gIGlmIChmb3JtYXR0ZWRWYWx1ZS5sZW5ndGggPD0gbWF4TGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZvcm1hdHRlZFZhbHVlO1xuICB9XG5cbiAgaWYgKChmb3JtYXR0ZWRWYWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpLnRvU3RyaW5nKCkpLmxlbmd0aCA8PSBtYXhMZW5ndGgpIHtcbiAgICByZXR1cm4gZm9ybWF0dGVkVmFsdWU7XG4gIH1cblxuICBpZiAoKGZvcm1hdHRlZFZhbHVlID0gbnVtZXJhbCh2YWx1ZSkuZm9ybWF0KCcwLjBhJykpLmxlbmd0aCA8PSBtYXhMZW5ndGgpIHtcbiAgICByZXR1cm4gZm9ybWF0dGVkVmFsdWU7XG4gIH1cblxuICByZXR1cm4gbnVtZXJhbCh2YWx1ZSkuZm9ybWF0KCcwYScpO1xufVxuXG5cbmZ1bmN0aW9uIHVwZGF0ZURvbGxhclZhbHVlKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBnZXREb2xsYXJWYWx1ZSgpXG4gICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBuZXdEb2xsYXJWYWx1ZSA9IHZhbHVlO1xuICAgICAgY2hyb21lLmJyb3dzZXJBY3Rpb24uc2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3Ioe2NvbG9yOiBbMCwgMCwgMCwgMjBdfSk7XG4gICAgICBjaHJvbWUuYnJvd3NlckFjdGlvbi5zZXRCYWRnZVRleHQoe3RleHQ6IGdldEJhZGdlVGV4dChuZXdEb2xsYXJWYWx1ZSl9KTtcbiAgICAgIGNvbnNvbGUubG9nKG5ld0RvbGxhclZhbHVlLCBkb2xsYXJWYWx1ZSwgbmV3RG9sbGFyVmFsdWUgIT09IGRvbGxhclZhbHVlKTtcbiAgICAgIGlmIChuZXdEb2xsYXJWYWx1ZSAhPT0gZG9sbGFyVmFsdWUpIHtcbiAgICAgICAgbmV3IE5vdGlmaWNhdGlvbignRG9sbGFyIFZhbHVlIENoYW5nZWQnLCB7XG4gICAgICAgICAgYm9keTogbmV3RG9sbGFyVmFsdWUudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRvbGxhclZhbHVlID0gbmV3RG9sbGFyVmFsdWU7XG4gICAgICByZXNvbHZlKGRvbGxhclZhbHVlKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgIH0pO1xuICB9KTtcblxufVxuXG5jaHJvbWUuYWxhcm1zLmNyZWF0ZSgndXBkYXRlRG9sbGFyJywge1xuICBwZXJpb2RJbk1pbnV0ZXM6IHJlZnJlc2hNaW51dGVzLFxufSk7XG5cbmNocm9tZS5hbGFybXMub25BbGFybS5hZGRMaXN0ZW5lcigoKSA9PiB7XG4gIHVwZGF0ZURvbGxhclZhbHVlKCk7XG59KTtcblxudXBkYXRlRG9sbGFyVmFsdWUoKTtcbnNldEJhZGdlSWNvbihzZWxlY3RlZENvdW50cnkpXG5cbi8vIEB0cy1pZ25vcmVcbmNocm9tZS5leHRlbnNpb24ub25Db25uZWN0LmFkZExpc3RlbmVyKGZ1bmN0aW9uIChwb3J0KSB7XG4gIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgLi4uLi4nKTtcbiAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKG1zZykge1xuICAgIGlmIChtc2cudHlwZSA9PT0gJ2dldERvbGxhclZhbHVlJykge1xuICAgICAgdXBkYXRlRG9sbGFyVmFsdWUoKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICBwb3J0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICB0eXBlOiAnc2V0RG9sbGFyVmFsdWUnLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSk7XG4iLCIvKiEgQHByZXNlcnZlXG4gKiBudW1lcmFsLmpzXG4gKiB2ZXJzaW9uIDogMi4wLjZcbiAqIGF1dGhvciA6IEFkYW0gRHJhcGVyXG4gKiBsaWNlbnNlIDogTUlUXG4gKiBodHRwOi8vYWRhbXdkcmFwZXIuZ2l0aHViLmNvbS9OdW1lcmFsLWpzL1xuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWwubnVtZXJhbCA9IGZhY3RvcnkoKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgIFZhcmlhYmxlc1xuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIHZhciBudW1lcmFsLFxuICAgICAgICBfLFxuICAgICAgICBWRVJTSU9OID0gJzIuMC42JyxcbiAgICAgICAgZm9ybWF0cyA9IHt9LFxuICAgICAgICBsb2NhbGVzID0ge30sXG4gICAgICAgIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY3VycmVudExvY2FsZTogJ2VuJyxcbiAgICAgICAgICAgIHplcm9Gb3JtYXQ6IG51bGwsXG4gICAgICAgICAgICBudWxsRm9ybWF0OiBudWxsLFxuICAgICAgICAgICAgZGVmYXVsdEZvcm1hdDogJzAsMCcsXG4gICAgICAgICAgICBzY2FsZVBlcmNlbnRCeTEwMDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgY3VycmVudExvY2FsZTogZGVmYXVsdHMuY3VycmVudExvY2FsZSxcbiAgICAgICAgICAgIHplcm9Gb3JtYXQ6IGRlZmF1bHRzLnplcm9Gb3JtYXQsXG4gICAgICAgICAgICBudWxsRm9ybWF0OiBkZWZhdWx0cy5udWxsRm9ybWF0LFxuICAgICAgICAgICAgZGVmYXVsdEZvcm1hdDogZGVmYXVsdHMuZGVmYXVsdEZvcm1hdCxcbiAgICAgICAgICAgIHNjYWxlUGVyY2VudEJ5MTAwOiBkZWZhdWx0cy5zY2FsZVBlcmNlbnRCeTEwMFxuICAgICAgICB9O1xuXG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgIENvbnN0cnVjdG9yc1xuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8vIE51bWVyYWwgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE51bWVyYWwoaW5wdXQsIG51bWJlcikge1xuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gbnVtYmVyO1xuICAgIH1cblxuICAgIG51bWVyYWwgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgdmFsdWUsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgdW5mb3JtYXRGdW5jdGlvbixcbiAgICAgICAgICAgIHJlZ2V4cDtcblxuICAgICAgICBpZiAobnVtZXJhbC5pc051bWVyYWwoaW5wdXQpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGlucHV0LnZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09IDAgfHwgdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSBudWxsIHx8IF8uaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuemVyb0Zvcm1hdCAmJiBpbnB1dCA9PT0gb3B0aW9ucy56ZXJvRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm51bGxGb3JtYXQgJiYgaW5wdXQgPT09IG9wdGlvbnMubnVsbEZvcm1hdCB8fCAhaW5wdXQucmVwbGFjZSgvW14wLTldKy9nLCAnJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGtpbmQgaW4gZm9ybWF0cykge1xuICAgICAgICAgICAgICAgICAgICByZWdleHAgPSB0eXBlb2YgZm9ybWF0c1traW5kXS5yZWdleHBzLnVuZm9ybWF0ID09PSAnZnVuY3Rpb24nID8gZm9ybWF0c1traW5kXS5yZWdleHBzLnVuZm9ybWF0KCkgOiBmb3JtYXRzW2tpbmRdLnJlZ2V4cHMudW5mb3JtYXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZ2V4cCAmJiBpbnB1dC5tYXRjaChyZWdleHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmZvcm1hdEZ1bmN0aW9uID0gZm9ybWF0c1traW5kXS51bmZvcm1hdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB1bmZvcm1hdEZ1bmN0aW9uID0gdW5mb3JtYXRGdW5jdGlvbiB8fCBudW1lcmFsLl8uc3RyaW5nVG9OdW1iZXI7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZm9ybWF0RnVuY3Rpb24oaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBOdW1iZXIoaW5wdXQpfHwgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgTnVtZXJhbChpbnB1dCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICAvLyB2ZXJzaW9uIG51bWJlclxuICAgIG51bWVyYWwudmVyc2lvbiA9IFZFUlNJT047XG5cbiAgICAvLyBjb21wYXJlIG51bWVyYWwgb2JqZWN0XG4gICAgbnVtZXJhbC5pc051bWVyYWwgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE51bWVyYWw7XG4gICAgfTtcblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbnNcbiAgICBudW1lcmFsLl8gPSBfID0ge1xuICAgICAgICAvLyBmb3JtYXRzIG51bWJlcnMgc2VwYXJhdG9ycywgZGVjaW1hbHMgcGxhY2VzLCBzaWducywgYWJicmV2aWF0aW9uc1xuICAgICAgICBudW1iZXJUb0Zvcm1hdDogZnVuY3Rpb24odmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSA9IGxvY2FsZXNbbnVtZXJhbC5vcHRpb25zLmN1cnJlbnRMb2NhbGVdLFxuICAgICAgICAgICAgICAgIG5lZ1AgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBvcHREZWMgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBsZWFkaW5nQ291bnQgPSAwLFxuICAgICAgICAgICAgICAgIGFiYnIgPSAnJyxcbiAgICAgICAgICAgICAgICB0cmlsbGlvbiA9IDEwMDAwMDAwMDAwMDAsXG4gICAgICAgICAgICAgICAgYmlsbGlvbiA9IDEwMDAwMDAwMDAsXG4gICAgICAgICAgICAgICAgbWlsbGlvbiA9IDEwMDAwMDAsXG4gICAgICAgICAgICAgICAgdGhvdXNhbmQgPSAxMDAwLFxuICAgICAgICAgICAgICAgIGRlY2ltYWwgPSAnJyxcbiAgICAgICAgICAgICAgICBuZWcgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBhYmJyRm9yY2UsIC8vIGZvcmNlIGFiYnJldmlhdGlvblxuICAgICAgICAgICAgICAgIGFicyxcbiAgICAgICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICAgICAgbWF4LFxuICAgICAgICAgICAgICAgIHBvd2VyLFxuICAgICAgICAgICAgICAgIGludCxcbiAgICAgICAgICAgICAgICBwcmVjaXNpb24sXG4gICAgICAgICAgICAgICAgc2lnbmVkLFxuICAgICAgICAgICAgICAgIHRob3VzYW5kcyxcbiAgICAgICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBuZXZlciBmb3JtYXQgYSBudWxsIHZhbHVlXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIHx8IDA7XG5cbiAgICAgICAgICAgIGFicyA9IE1hdGguYWJzKHZhbHVlKTtcblxuICAgICAgICAgICAgLy8gc2VlIGlmIHdlIHNob3VsZCB1c2UgcGFyZW50aGVzZXMgZm9yIG5lZ2F0aXZlIG51bWJlciBvciBpZiB3ZSBzaG91bGQgcHJlZml4IHdpdGggYSBzaWduXG4gICAgICAgICAgICAvLyBpZiBib3RoIGFyZSBwcmVzZW50IHdlIGRlZmF1bHQgdG8gcGFyZW50aGVzZXNcbiAgICAgICAgICAgIGlmIChudW1lcmFsLl8uaW5jbHVkZXMoZm9ybWF0LCAnKCcpKSB7XG4gICAgICAgICAgICAgICAgbmVnUCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL1tcXCh8XFwpXS9nLCAnJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhmb3JtYXQsICcrJykgfHwgbnVtZXJhbC5fLmluY2x1ZGVzKGZvcm1hdCwgJy0nKSkge1xuICAgICAgICAgICAgICAgIHNpZ25lZCA9IG51bWVyYWwuXy5pbmNsdWRlcyhmb3JtYXQsICcrJykgPyBmb3JtYXQuaW5kZXhPZignKycpIDogdmFsdWUgPCAwID8gZm9ybWF0LmluZGV4T2YoJy0nKSA6IC0xO1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9bXFwrfFxcLV0vZywgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzZWUgaWYgYWJicmV2aWF0aW9uIGlzIHdhbnRlZFxuICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhmb3JtYXQsICdhJykpIHtcbiAgICAgICAgICAgICAgICBhYmJyRm9yY2UgPSBmb3JtYXQubWF0Y2goL2Eoa3xtfGJ8dCk/Lyk7XG5cbiAgICAgICAgICAgICAgICBhYmJyRm9yY2UgPSBhYmJyRm9yY2UgPyBhYmJyRm9yY2VbMV0gOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZSBiZWZvcmUgYWJicmV2aWF0aW9uXG4gICAgICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhmb3JtYXQsICcgYScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFiYnIgPSAnICc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobmV3IFJlZ0V4cChhYmJyICsgJ2Fba21idF0/JyksICcnKTtcblxuICAgICAgICAgICAgICAgIGlmIChhYnMgPj0gdHJpbGxpb24gJiYgIWFiYnJGb3JjZSB8fCBhYmJyRm9yY2UgPT09ICd0Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmlsbGlvblxuICAgICAgICAgICAgICAgICAgICBhYmJyICs9IGxvY2FsZS5hYmJyZXZpYXRpb25zLnRyaWxsaW9uO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gdHJpbGxpb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhYnMgPCB0cmlsbGlvbiAmJiBhYnMgPj0gYmlsbGlvbiAmJiAhYWJickZvcmNlIHx8IGFiYnJGb3JjZSA9PT0gJ2InKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJpbGxpb25cbiAgICAgICAgICAgICAgICAgICAgYWJiciArPSBsb2NhbGUuYWJicmV2aWF0aW9ucy5iaWxsaW9uO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gYmlsbGlvbjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFicyA8IGJpbGxpb24gJiYgYWJzID49IG1pbGxpb24gJiYgIWFiYnJGb3JjZSB8fCBhYmJyRm9yY2UgPT09ICdtJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBtaWxsaW9uXG4gICAgICAgICAgICAgICAgICAgIGFiYnIgKz0gbG9jYWxlLmFiYnJldmlhdGlvbnMubWlsbGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAvIG1pbGxpb247XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhYnMgPCBtaWxsaW9uICYmIGFicyA+PSB0aG91c2FuZCAmJiAhYWJickZvcmNlIHx8IGFiYnJGb3JjZSA9PT0gJ2snKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRob3VzYW5kXG4gICAgICAgICAgICAgICAgICAgIGFiYnIgKz0gbG9jYWxlLmFiYnJldmlhdGlvbnMudGhvdXNhbmQ7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyB0aG91c2FuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBvcHRpb25hbCBkZWNpbWFsc1xuICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhmb3JtYXQsICdbLl0nKSkge1xuICAgICAgICAgICAgICAgIG9wdERlYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ1suXScsICcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJyZWFrIG51bWJlciBhbmQgZm9ybWF0XG4gICAgICAgICAgICBpbnQgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KCcuJylbMF07XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBmb3JtYXQuc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgIHRob3VzYW5kcyA9IGZvcm1hdC5pbmRleE9mKCcsJyk7XG4gICAgICAgICAgICBsZWFkaW5nQ291bnQgPSAoZm9ybWF0LnNwbGl0KCcuJylbMF0uc3BsaXQoJywnKVswXS5tYXRjaCgvMC9nKSB8fCBbXSkubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAocHJlY2lzaW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhwcmVjaXNpb24sICdbJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uLnJlcGxhY2UoJ10nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbi5zcGxpdCgnWycpO1xuICAgICAgICAgICAgICAgICAgICBkZWNpbWFsID0gbnVtZXJhbC5fLnRvRml4ZWQodmFsdWUsIChwcmVjaXNpb25bMF0ubGVuZ3RoICsgcHJlY2lzaW9uWzFdLmxlbmd0aCksIHJvdW5kaW5nRnVuY3Rpb24sIHByZWNpc2lvblsxXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgPSBudW1lcmFsLl8udG9GaXhlZCh2YWx1ZSwgcHJlY2lzaW9uLmxlbmd0aCwgcm91bmRpbmdGdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW50ID0gZGVjaW1hbC5zcGxpdCgnLicpWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhkZWNpbWFsLCAnLicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVsaW1pdGVycy5kZWNpbWFsICsgZGVjaW1hbC5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWwgPSAnJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0RGVjICYmIE51bWJlcihkZWNpbWFsLnNsaWNlKDEpKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWNpbWFsID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnQgPSBudW1lcmFsLl8udG9GaXhlZCh2YWx1ZSwgMCwgcm91bmRpbmdGdW5jdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGFiYnJldmlhdGlvbiBhZ2FpbiBhZnRlciByb3VuZGluZ1xuICAgICAgICAgICAgaWYgKGFiYnIgJiYgIWFiYnJGb3JjZSAmJiBOdW1iZXIoaW50KSA+PSAxMDAwICYmIGFiYnIgIT09IGxvY2FsZS5hYmJyZXZpYXRpb25zLnRyaWxsaW9uKSB7XG4gICAgICAgICAgICAgICAgaW50ID0gU3RyaW5nKE51bWJlcihpbnQpIC8gMTAwMCk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGFiYnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBsb2NhbGUuYWJicmV2aWF0aW9ucy50aG91c2FuZDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFiYnIgPSBsb2NhbGUuYWJicmV2aWF0aW9ucy5taWxsaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgbG9jYWxlLmFiYnJldmlhdGlvbnMubWlsbGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFiYnIgPSBsb2NhbGUuYWJicmV2aWF0aW9ucy5iaWxsaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgbG9jYWxlLmFiYnJldmlhdGlvbnMuYmlsbGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFiYnIgPSBsb2NhbGUuYWJicmV2aWF0aW9ucy50cmlsbGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAvLyBmb3JtYXQgbnVtYmVyXG4gICAgICAgICAgICBpZiAobnVtZXJhbC5fLmluY2x1ZGVzKGludCwgJy0nKSkge1xuICAgICAgICAgICAgICAgIGludCA9IGludC5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICBuZWcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW50Lmxlbmd0aCA8IGxlYWRpbmdDb3VudCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBsZWFkaW5nQ291bnQgLSBpbnQubGVuZ3RoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGludCA9ICcwJyArIGludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aG91c2FuZHMgPiAtMSkge1xuICAgICAgICAgICAgICAgIGludCA9IGludC50b1N0cmluZygpLnJlcGxhY2UoLyhcXGQpKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJyQxJyArIGxvY2FsZS5kZWxpbWl0ZXJzLnRob3VzYW5kcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JtYXQuaW5kZXhPZignLicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaW50ID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dHB1dCA9IGludCArIGRlY2ltYWwgKyAoYWJiciA/IGFiYnIgOiAnJyk7XG5cbiAgICAgICAgICAgIGlmIChuZWdQKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKG5lZ1AgJiYgbmVnID8gJygnIDogJycpICsgb3V0cHV0ICsgKG5lZ1AgJiYgbmVnID8gJyknIDogJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc2lnbmVkID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gc2lnbmVkID09PSAwID8gKG5lZyA/ICctJyA6ICcrJykgKyBvdXRwdXQgOiBvdXRwdXQgKyAobmVnID8gJy0nIDogJysnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5lZykge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnLScgKyBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICAvLyB1bmZvcm1hdHMgbnVtYmVycyBzZXBhcmF0b3JzLCBkZWNpbWFscyBwbGFjZXMsIHNpZ25zLCBhYmJyZXZpYXRpb25zXG4gICAgICAgIHN0cmluZ1RvTnVtYmVyOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUgPSBsb2NhbGVzW29wdGlvbnMuY3VycmVudExvY2FsZV0sXG4gICAgICAgICAgICAgICAgc3RyaW5nT3JpZ2luYWwgPSBzdHJpbmcsXG4gICAgICAgICAgICAgICAgYWJicmV2aWF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQ6IDMsXG4gICAgICAgICAgICAgICAgICAgIG1pbGxpb246IDYsXG4gICAgICAgICAgICAgICAgICAgIGJpbGxpb246IDksXG4gICAgICAgICAgICAgICAgICAgIHRyaWxsaW9uOiAxMlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgcmVnZXhwO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy56ZXJvRm9ybWF0ICYmIHN0cmluZyA9PT0gb3B0aW9ucy56ZXJvRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm51bGxGb3JtYXQgJiYgc3RyaW5nID09PSBvcHRpb25zLm51bGxGb3JtYXQgfHwgIXN0cmluZy5yZXBsYWNlKC9bXjAtOV0rL2csICcnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChsb2NhbGUuZGVsaW1pdGVycy5kZWNpbWFsICE9PSAnLicpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcLi9nLCAnJykucmVwbGFjZShsb2NhbGUuZGVsaW1pdGVycy5kZWNpbWFsLCAnLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoYWJicmV2aWF0aW9uIGluIGFiYnJldmlhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cCgnW15hLXpBLVpdJyArIGxvY2FsZS5hYmJyZXZpYXRpb25zW2FiYnJldmlhdGlvbl0gKyAnKD86XFxcXCl8KFxcXFwnICsgbG9jYWxlLmN1cnJlbmN5LnN5bWJvbCArICcpPyg/OlxcXFwpKT8pPyQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nT3JpZ2luYWwubWF0Y2gocmVnZXhwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKj0gTWF0aC5wb3coMTAsIGFiYnJldmlhdGlvbnNbYWJicmV2aWF0aW9uXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBuZWdhdGl2ZSBudW1iZXJcbiAgICAgICAgICAgICAgICB2YWx1ZSAqPSAoc3RyaW5nLnNwbGl0KCctJykubGVuZ3RoICsgTWF0aC5taW4oc3RyaW5nLnNwbGl0KCcoJykubGVuZ3RoIC0gMSwgc3RyaW5nLnNwbGl0KCcpJykubGVuZ3RoIC0gMSkpICUgMiA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBub24gbnVtYmVyc1xuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9bXjAtOVxcLl0rL2csICcnKTtcblxuICAgICAgICAgICAgICAgIHZhbHVlICo9IE51bWJlcihzdHJpbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGlzTmFOOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlczogZnVuY3Rpb24oc3RyaW5nLCBzZWFyY2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuaW5kZXhPZihzZWFyY2gpICE9PSAtMTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbihzdHJpbmcsIHN1YlN0cmluZywgc3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgc3RhcnQpICsgc3ViU3RyaW5nICsgc3RyaW5nLnNsaWNlKHN0YXJ0KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVkdWNlOiBmdW5jdGlvbihhcnJheSwgY2FsbGJhY2sgLyosIGluaXRpYWxWYWx1ZSovKSB7XG4gICAgICAgICAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5yZWR1Y2UgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNhbGxiYWNrICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdChhcnJheSksXG4gICAgICAgICAgICAgICAgbGVuID0gdC5sZW5ndGggPj4+IDAsXG4gICAgICAgICAgICAgICAgayA9IDAsXG4gICAgICAgICAgICAgICAgdmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMl07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChrIDwgbGVuICYmICEoayBpbiB0KSkge1xuICAgICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGsgPj0gbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRbaysrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoayBpbiB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIHRba10sIGssIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXB1dGVzIHRoZSBtdWx0aXBsaWVyIG5lY2Vzc2FyeSB0byBtYWtlIHggPj0gMSxcbiAgICAgICAgICogZWZmZWN0aXZlbHkgZWxpbWluYXRpbmcgbWlzY2FsY3VsYXRpb25zIGNhdXNlZCBieVxuICAgICAgICAgKiBmaW5pdGUgcHJlY2lzaW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgbXVsdGlwbGllcjogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHgudG9TdHJpbmcoKS5zcGxpdCgnLicpO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFydHMubGVuZ3RoIDwgMiA/IDEgOiBNYXRoLnBvdygxMCwgcGFydHNbMV0ubGVuZ3RoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGEgdmFyaWFibGUgbnVtYmVyIG9mIGFyZ3VtZW50cywgcmV0dXJucyB0aGUgbWF4aW11bVxuICAgICAgICAgKiBtdWx0aXBsaWVyIHRoYXQgbXVzdCBiZSB1c2VkIHRvIG5vcm1hbGl6ZSBhbiBvcGVyYXRpb24gaW52b2x2aW5nXG4gICAgICAgICAqIGFsbCBvZiB0aGVtLlxuICAgICAgICAgKi9cbiAgICAgICAgY29ycmVjdGlvbkZhY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICByZXR1cm4gYXJncy5yZWR1Y2UoZnVuY3Rpb24oYWNjdW0sIG5leHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW4gPSBfLm11bHRpcGxpZXIobmV4dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtID4gbW4gPyBhY2N1bSA6IG1uO1xuICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB0b0ZpeGVkKCkgdGhhdCB0cmVhdHMgZmxvYXRzIG1vcmUgbGlrZSBkZWNpbWFsc1xuICAgICAgICAgKlxuICAgICAgICAgKiBGaXhlcyBiaW5hcnkgcm91bmRpbmcgaXNzdWVzIChlZy4gKDAuNjE1KS50b0ZpeGVkKDIpID09PSAnMC42MScpIHRoYXQgcHJlc2VudFxuICAgICAgICAgKiBwcm9ibGVtcyBmb3IgYWNjb3VudGluZy0gYW5kIGZpbmFuY2UtcmVsYXRlZCBzb2Z0d2FyZS5cbiAgICAgICAgICovXG4gICAgICAgIHRvRml4ZWQ6IGZ1bmN0aW9uKHZhbHVlLCBtYXhEZWNpbWFscywgcm91bmRpbmdGdW5jdGlvbiwgb3B0aW9uYWxzKSB7XG4gICAgICAgICAgICB2YXIgc3BsaXRWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJy4nKSxcbiAgICAgICAgICAgICAgICBtaW5EZWNpbWFscyA9IG1heERlY2ltYWxzIC0gKG9wdGlvbmFscyB8fCAwKSxcbiAgICAgICAgICAgICAgICBib3VuZGVkUHJlY2lzaW9uLFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsc1JlZ0V4cCxcbiAgICAgICAgICAgICAgICBwb3dlcixcbiAgICAgICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgICAgIC8vIFVzZSB0aGUgc21hbGxlc3QgcHJlY2lzaW9uIHZhbHVlIHBvc3NpYmxlIHRvIGF2b2lkIGVycm9ycyBmcm9tIGZsb2F0aW5nIHBvaW50IHJlcHJlc2VudGF0aW9uXG4gICAgICAgICAgICBpZiAoc3BsaXRWYWx1ZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgYm91bmRlZFByZWNpc2lvbiA9IE1hdGgubWluKE1hdGgubWF4KHNwbGl0VmFsdWVbMV0ubGVuZ3RoLCBtaW5EZWNpbWFscyksIG1heERlY2ltYWxzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJvdW5kZWRQcmVjaXNpb24gPSBtaW5EZWNpbWFscztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG93ZXIgPSBNYXRoLnBvdygxMCwgYm91bmRlZFByZWNpc2lvbik7XG5cbiAgICAgICAgICAgIC8vIE11bHRpcGx5IHVwIGJ5IHByZWNpc2lvbiwgcm91bmQgYWNjdXJhdGVseSwgdGhlbiBkaXZpZGUgYW5kIHVzZSBuYXRpdmUgdG9GaXhlZCgpOlxuICAgICAgICAgICAgb3V0cHV0ID0gKHJvdW5kaW5nRnVuY3Rpb24odmFsdWUgKyAnZSsnICsgYm91bmRlZFByZWNpc2lvbikgLyBwb3dlcikudG9GaXhlZChib3VuZGVkUHJlY2lzaW9uKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbmFscyA+IG1heERlY2ltYWxzIC0gYm91bmRlZFByZWNpc2lvbikge1xuICAgICAgICAgICAgICAgIG9wdGlvbmFsc1JlZ0V4cCA9IG5ldyBSZWdFeHAoJ1xcXFwuPzB7MSwnICsgKG9wdGlvbmFscyAtIChtYXhEZWNpbWFscyAtIGJvdW5kZWRQcmVjaXNpb24pKSArICd9JCcpO1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKG9wdGlvbmFsc1JlZ0V4cCwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGF2YWxpYWJsZSBvcHRpb25zXG4gICAgbnVtZXJhbC5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIC8vIGF2YWxpYWJsZSBmb3JtYXRzXG4gICAgbnVtZXJhbC5mb3JtYXRzID0gZm9ybWF0cztcblxuICAgIC8vIGF2YWxpYWJsZSBmb3JtYXRzXG4gICAgbnVtZXJhbC5sb2NhbGVzID0gbG9jYWxlcztcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gc2V0cyB0aGUgY3VycmVudCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBudW1lcmFsLmxvY2FsZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBvcHRpb25zLmN1cnJlbnRMb2NhbGUgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zLmN1cnJlbnRMb2NhbGU7XG4gICAgfTtcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBsb2FkZWQgbG9jYWxlIGRhdGEuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnRcbiAgICAvLyBnbG9iYWwgbG9jYWxlIG9iamVjdC5cbiAgICBudW1lcmFsLmxvY2FsZURhdGEgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW29wdGlvbnMuY3VycmVudExvY2FsZV07XG4gICAgICAgIH1cblxuICAgICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoIWxvY2FsZXNba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGxvY2FsZSA6ICcgKyBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNba2V5XTtcbiAgICB9O1xuXG4gICAgbnVtZXJhbC5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBkZWZhdWx0cykge1xuICAgICAgICAgICAgb3B0aW9uc1twcm9wZXJ0eV0gPSBkZWZhdWx0c1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbnVtZXJhbC56ZXJvRm9ybWF0ID0gZnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIG9wdGlvbnMuemVyb0Zvcm1hdCA9IHR5cGVvZihmb3JtYXQpID09PSAnc3RyaW5nJyA/IGZvcm1hdCA6IG51bGw7XG4gICAgfTtcblxuICAgIG51bWVyYWwubnVsbEZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgb3B0aW9ucy5udWxsRm9ybWF0ID0gdHlwZW9mKGZvcm1hdCkgPT09ICdzdHJpbmcnID8gZm9ybWF0IDogbnVsbDtcbiAgICB9O1xuXG4gICAgbnVtZXJhbC5kZWZhdWx0Rm9ybWF0ID0gZnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIG9wdGlvbnMuZGVmYXVsdEZvcm1hdCA9IHR5cGVvZihmb3JtYXQpID09PSAnc3RyaW5nJyA/IGZvcm1hdCA6ICcwLjAnO1xuICAgIH07XG5cbiAgICBudW1lcmFsLnJlZ2lzdGVyID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgZm9ybWF0KSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKHRoaXNbdHlwZSArICdzJ11bbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobmFtZSArICcgJyArIHR5cGUgKyAnIGFscmVhZHkgcmVnaXN0ZXJlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbdHlwZSArICdzJ11bbmFtZV0gPSBmb3JtYXQ7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9O1xuXG5cbiAgICBudW1lcmFsLnZhbGlkYXRlID0gZnVuY3Rpb24odmFsLCBjdWx0dXJlKSB7XG4gICAgICAgIHZhciBfZGVjaW1hbFNlcCxcbiAgICAgICAgICAgIF90aG91c2FuZFNlcCxcbiAgICAgICAgICAgIF9jdXJyU3ltYm9sLFxuICAgICAgICAgICAgX3ZhbEFycmF5LFxuICAgICAgICAgICAgX2FiYnJPYmosXG4gICAgICAgICAgICBfdGhvdXNhbmRSZWdFeCxcbiAgICAgICAgICAgIGxvY2FsZURhdGEsXG4gICAgICAgICAgICB0ZW1wO1xuXG4gICAgICAgIC8vY29lcmNlIHZhbCB0byBzdHJpbmdcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWwgKz0gJyc7XG5cbiAgICAgICAgICAgIGlmIChjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ051bWVyYWwuanM6IFZhbHVlIGlzIG5vdCBzdHJpbmcuIEl0IGhhcyBiZWVuIGNvLWVyY2VkIHRvOiAnLCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy90cmltIHdoaXRlc3BhY2VzIGZyb20gZWl0aGVyIHNpZGVzXG4gICAgICAgIHZhbCA9IHZhbC50cmltKCk7XG5cbiAgICAgICAgLy9pZiB2YWwgaXMganVzdCBkaWdpdHMgcmV0dXJuIHRydWVcbiAgICAgICAgaWYgKCEhdmFsLm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHZhbCBpcyBlbXB0eSByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKHZhbCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZ2V0IHRoZSBkZWNpbWFsIGFuZCB0aG91c2FuZHMgc2VwYXJhdG9yIGZyb20gbnVtZXJhbC5sb2NhbGVEYXRhXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvL2NoZWNrIGlmIHRoZSBjdWx0dXJlIGlzIHVuZGVyc3Rvb2QgYnkgbnVtZXJhbC4gaWYgbm90LCBkZWZhdWx0IGl0IHRvIGN1cnJlbnQgbG9jYWxlXG4gICAgICAgICAgICBsb2NhbGVEYXRhID0gbnVtZXJhbC5sb2NhbGVEYXRhKGN1bHR1cmUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2NhbGVEYXRhID0gbnVtZXJhbC5sb2NhbGVEYXRhKG51bWVyYWwubG9jYWxlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zZXR1cCB0aGUgZGVsaW1pdGVycyBhbmQgY3VycmVuY3kgc3ltYm9sIGJhc2VkIG9uIGN1bHR1cmUvbG9jYWxlXG4gICAgICAgIF9jdXJyU3ltYm9sID0gbG9jYWxlRGF0YS5jdXJyZW5jeS5zeW1ib2w7XG4gICAgICAgIF9hYmJyT2JqID0gbG9jYWxlRGF0YS5hYmJyZXZpYXRpb25zO1xuICAgICAgICBfZGVjaW1hbFNlcCA9IGxvY2FsZURhdGEuZGVsaW1pdGVycy5kZWNpbWFsO1xuICAgICAgICBpZiAobG9jYWxlRGF0YS5kZWxpbWl0ZXJzLnRob3VzYW5kcyA9PT0gJy4nKSB7XG4gICAgICAgICAgICBfdGhvdXNhbmRTZXAgPSAnXFxcXC4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3Rob3VzYW5kU2VwID0gbG9jYWxlRGF0YS5kZWxpbWl0ZXJzLnRob3VzYW5kcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkYXRpbmcgY3VycmVuY3kgc3ltYm9sXG4gICAgICAgIHRlbXAgPSB2YWwubWF0Y2goL15bXlxcZF0rLyk7XG4gICAgICAgIGlmICh0ZW1wICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YWwgPSB2YWwuc3Vic3RyKDEpO1xuICAgICAgICAgICAgaWYgKHRlbXBbMF0gIT09IF9jdXJyU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy92YWxpZGF0aW5nIGFiYnJldmlhdGlvbiBzeW1ib2xcbiAgICAgICAgdGVtcCA9IHZhbC5tYXRjaCgvW15cXGRdKyQvKTtcbiAgICAgICAgaWYgKHRlbXAgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbCA9IHZhbC5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICBpZiAodGVtcFswXSAhPT0gX2FiYnJPYmoudGhvdXNhbmQgJiYgdGVtcFswXSAhPT0gX2FiYnJPYmoubWlsbGlvbiAmJiB0ZW1wWzBdICE9PSBfYWJick9iai5iaWxsaW9uICYmIHRlbXBbMF0gIT09IF9hYmJyT2JqLnRyaWxsaW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3Rob3VzYW5kUmVnRXggPSBuZXcgUmVnRXhwKF90aG91c2FuZFNlcCArICd7Mn0nKTtcblxuICAgICAgICBpZiAoIXZhbC5tYXRjaCgvW15cXGQuLF0vZykpIHtcbiAgICAgICAgICAgIF92YWxBcnJheSA9IHZhbC5zcGxpdChfZGVjaW1hbFNlcCk7XG4gICAgICAgICAgICBpZiAoX3ZhbEFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChfdmFsQXJyYXkubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCAhISBfdmFsQXJyYXlbMF0ubWF0Y2goL15cXGQrLipcXGQkLykgJiYgIV92YWxBcnJheVswXS5tYXRjaChfdGhvdXNhbmRSZWdFeCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdmFsQXJyYXlbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCAhISBfdmFsQXJyYXlbMF0ubWF0Y2goL15cXGQrJC8pICYmICFfdmFsQXJyYXlbMF0ubWF0Y2goX3Rob3VzYW5kUmVnRXgpICYmICEhIF92YWxBcnJheVsxXS5tYXRjaCgvXlxcZCskLykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggISEgX3ZhbEFycmF5WzBdLm1hdGNoKC9eXFxkKy4qXFxkJC8pICYmICFfdmFsQXJyYXlbMF0ubWF0Y2goX3Rob3VzYW5kUmVnRXgpICYmICEhIF92YWxBcnJheVsxXS5tYXRjaCgvXlxcZCskLykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgTnVtZXJhbCBQcm90b3R5cGVcbiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBudW1lcmFsLmZuID0gTnVtZXJhbC5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1lcmFsKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXQ6IGZ1bmN0aW9uKGlucHV0U3RyaW5nLCByb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl92YWx1ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBpbnB1dFN0cmluZyB8fCBvcHRpb25zLmRlZmF1bHRGb3JtYXQsXG4gICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb247XG5cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBoYXZlIGEgcm91bmRpbmdGdW5jdGlvblxuICAgICAgICAgICAgcm91bmRpbmdGdW5jdGlvbiA9IHJvdW5kaW5nRnVuY3Rpb24gfHwgTWF0aC5yb3VuZDtcblxuICAgICAgICAgICAgLy8gZm9ybWF0IGJhc2VkIG9uIHZhbHVlXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IDAgJiYgb3B0aW9ucy56ZXJvRm9ybWF0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3B0aW9ucy56ZXJvRm9ybWF0O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCAmJiBvcHRpb25zLm51bGxGb3JtYXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvcHRpb25zLm51bGxGb3JtYXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoa2luZCBpbiBmb3JtYXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQubWF0Y2goZm9ybWF0c1traW5kXS5yZWdleHBzLmZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uID0gZm9ybWF0c1traW5kXS5mb3JtYXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb24gPSBmb3JtYXRGdW5jdGlvbiB8fCBudW1lcmFsLl8ubnVtYmVyVG9Gb3JtYXQ7XG5cbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBmb3JtYXRGdW5jdGlvbih2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBpbnB1dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjb3JyRmFjdG9yID0gXy5jb3JyZWN0aW9uRmFjdG9yLmNhbGwobnVsbCwgdGhpcy5fdmFsdWUsIHZhbHVlKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2JhY2soYWNjdW0sIGN1cnIsIGN1cnJJLCBPKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtICsgTWF0aC5yb3VuZChjb3JyRmFjdG9yICogY3Vycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXy5yZWR1Y2UoW3RoaXMuX3ZhbHVlLCB2YWx1ZV0sIGNiYWNrLCAwKSAvIGNvcnJGYWN0b3I7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBzdWJ0cmFjdDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjb3JyRmFjdG9yID0gXy5jb3JyZWN0aW9uRmFjdG9yLmNhbGwobnVsbCwgdGhpcy5fdmFsdWUsIHZhbHVlKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2JhY2soYWNjdW0sIGN1cnIsIGN1cnJJLCBPKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtIC0gTWF0aC5yb3VuZChjb3JyRmFjdG9yICogY3Vycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXy5yZWR1Y2UoW3ZhbHVlXSwgY2JhY2ssIE1hdGgucm91bmQodGhpcy5fdmFsdWUgKiBjb3JyRmFjdG9yKSkgLyBjb3JyRmFjdG9yO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgbXVsdGlwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBjYmFjayhhY2N1bSwgY3VyciwgY3VyckksIE8pIHtcbiAgICAgICAgICAgICAgICB2YXIgY29yckZhY3RvciA9IF8uY29ycmVjdGlvbkZhY3RvcihhY2N1bSwgY3Vycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYWNjdW0gKiBjb3JyRmFjdG9yKSAqIE1hdGgucm91bmQoY3VyciAqIGNvcnJGYWN0b3IpIC8gTWF0aC5yb3VuZChjb3JyRmFjdG9yICogY29yckZhY3Rvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXy5yZWR1Y2UoW3RoaXMuX3ZhbHVlLCB2YWx1ZV0sIGNiYWNrLCAxKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGRpdmlkZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNiYWNrKGFjY3VtLCBjdXJyLCBjdXJySSwgTykge1xuICAgICAgICAgICAgICAgIHZhciBjb3JyRmFjdG9yID0gXy5jb3JyZWN0aW9uRmFjdG9yKGFjY3VtLCBjdXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChhY2N1bSAqIGNvcnJGYWN0b3IpIC8gTWF0aC5yb3VuZChjdXJyICogY29yckZhY3Rvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXy5yZWR1Y2UoW3RoaXMuX3ZhbHVlLCB2YWx1ZV0sIGNiYWNrKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGRpZmZlcmVuY2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMobnVtZXJhbCh0aGlzLl92YWx1ZSkuc3VidHJhY3QodmFsdWUpLnZhbHVlKCkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgRGVmYXVsdCBMb2NhbGUgJiYgRm9ybWF0XG4gICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgbnVtZXJhbC5yZWdpc3RlcignbG9jYWxlJywgJ2VuJywge1xuICAgICAgICBkZWxpbWl0ZXJzOiB7XG4gICAgICAgICAgICB0aG91c2FuZHM6ICcsJyxcbiAgICAgICAgICAgIGRlY2ltYWw6ICcuJ1xuICAgICAgICB9LFxuICAgICAgICBhYmJyZXZpYXRpb25zOiB7XG4gICAgICAgICAgICB0aG91c2FuZDogJ2snLFxuICAgICAgICAgICAgbWlsbGlvbjogJ20nLFxuICAgICAgICAgICAgYmlsbGlvbjogJ2InLFxuICAgICAgICAgICAgdHJpbGxpb246ICd0J1xuICAgICAgICB9LFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTA7XG4gICAgICAgICAgICByZXR1cm4gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVuY3k6IHtcbiAgICAgICAgICAgIHN5bWJvbDogJyQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIFxuXG4oZnVuY3Rpb24oKSB7XG4gICAgICAgIG51bWVyYWwucmVnaXN0ZXIoJ2Zvcm1hdCcsICdicHMnLCB7XG4gICAgICAgICAgICByZWdleHBzOiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiAvKEJQUykvLFxuICAgICAgICAgICAgICAgIHVuZm9ybWF0OiAvKEJQUykvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwYWNlID0gbnVtZXJhbC5fLmluY2x1ZGVzKGZvcm1hdCwgJyBCUFMnKSA/ICcgJyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICogMTAwMDA7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3Igc3BhY2UgYmVmb3JlIEJQU1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9cXHM/QlBTLywgJycpO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbnVtZXJhbC5fLm51bWJlclRvRm9ybWF0KHZhbHVlLCBmb3JtYXQsIHJvdW5kaW5nRnVuY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhvdXRwdXQsICcpJykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnNwbGl0KCcnKTtcblxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuc3BsaWNlKC0xLCAwLCBzcGFjZSArICdCUFMnKTtcblxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuam9pbignJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0ICsgc3BhY2UgKyAnQlBTJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuZm9ybWF0OiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKyhudW1lcmFsLl8uc3RyaW5nVG9OdW1iZXIoc3RyaW5nKSAqIDAuMDAwMSkudG9GaXhlZCgxNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZWNpbWFsID0ge1xuICAgICAgICAgICAgYmFzZTogMTAwMCxcbiAgICAgICAgICAgIHN1ZmZpeGVzOiBbJ0InLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInLCAnRUInLCAnWkInLCAnWUInXVxuICAgICAgICB9LFxuICAgICAgICBiaW5hcnkgPSB7XG4gICAgICAgICAgICBiYXNlOiAxMDI0LFxuICAgICAgICAgICAgc3VmZml4ZXM6IFsnQicsICdLaUInLCAnTWlCJywgJ0dpQicsICdUaUInLCAnUGlCJywgJ0VpQicsICdaaUInLCAnWWlCJ11cbiAgICAgICAgfTtcblxuICAgIHZhciBhbGxTdWZmaXhlcyA9ICBkZWNpbWFsLnN1ZmZpeGVzLmNvbmNhdChiaW5hcnkuc3VmZml4ZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjaW1hbC5zdWZmaXhlcy5pbmRleE9mKGl0ZW0pIDwgMDtcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgdW5mb3JtYXRSZWdleCA9IGFsbFN1ZmZpeGVzLmpvaW4oJ3wnKTtcbiAgICAgICAgLy8gQWxsb3cgc3VwcG9ydCBmb3IgQlBTIChodHRwOi8vd3d3LmludmVzdG9wZWRpYS5jb20vdGVybXMvYi9iYXNpc3BvaW50LmFzcClcbiAgICAgICAgdW5mb3JtYXRSZWdleCA9ICcoJyArIHVuZm9ybWF0UmVnZXgucmVwbGFjZSgnQicsICdCKD8hUFMpJykgKyAnKSc7XG5cbiAgICBudW1lcmFsLnJlZ2lzdGVyKCdmb3JtYXQnLCAnYnl0ZXMnLCB7XG4gICAgICAgIHJlZ2V4cHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogLyhbMFxcc11pP2IpLyxcbiAgICAgICAgICAgIHVuZm9ybWF0OiBuZXcgUmVnRXhwKHVuZm9ybWF0UmVnZXgpXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24odmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCxcbiAgICAgICAgICAgICAgICBieXRlcyA9IG51bWVyYWwuXy5pbmNsdWRlcyhmb3JtYXQsICdpYicpID8gYmluYXJ5IDogZGVjaW1hbCxcbiAgICAgICAgICAgICAgICBzdWZmaXggPSBudW1lcmFsLl8uaW5jbHVkZXMoZm9ybWF0LCAnIGInKSB8fCBudW1lcmFsLl8uaW5jbHVkZXMoZm9ybWF0LCAnIGliJykgPyAnICcgOiAnJyxcbiAgICAgICAgICAgICAgICBwb3dlcixcbiAgICAgICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgICAgICAvLyBjaGVjayBmb3Igc3BhY2UgYmVmb3JlXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvXFxzP2k/Yi8sICcnKTtcblxuICAgICAgICAgICAgZm9yIChwb3dlciA9IDA7IHBvd2VyIDw9IGJ5dGVzLnN1ZmZpeGVzLmxlbmd0aDsgcG93ZXIrKykge1xuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgucG93KGJ5dGVzLmJhc2UsIHBvd2VyKTtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLnBvdyhieXRlcy5iYXNlLCBwb3dlciArIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSAwIHx8IHZhbHVlID49IG1pbiAmJiB2YWx1ZSA8IG1heCkge1xuICAgICAgICAgICAgICAgICAgICBzdWZmaXggKz0gYnl0ZXMuc3VmZml4ZXNbcG93ZXJdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gbWluO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdXRwdXQgPSBudW1lcmFsLl8ubnVtYmVyVG9Gb3JtYXQodmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyBzdWZmaXg7XG4gICAgICAgIH0sXG4gICAgICAgIHVuZm9ybWF0OiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG51bWVyYWwuXy5zdHJpbmdUb051bWJlcihzdHJpbmcpLFxuICAgICAgICAgICAgICAgIHBvd2VyLFxuICAgICAgICAgICAgICAgIGJ5dGVzTXVsdGlwbGllcjtcblxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChwb3dlciA9IGRlY2ltYWwuc3VmZml4ZXMubGVuZ3RoIC0gMTsgcG93ZXIgPj0gMDsgcG93ZXItLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVtZXJhbC5fLmluY2x1ZGVzKHN0cmluZywgZGVjaW1hbC5zdWZmaXhlc1twb3dlcl0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBieXRlc011bHRpcGxpZXIgPSBNYXRoLnBvdyhkZWNpbWFsLmJhc2UsIHBvd2VyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtZXJhbC5fLmluY2x1ZGVzKHN0cmluZywgYmluYXJ5LnN1ZmZpeGVzW3Bvd2VyXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzTXVsdGlwbGllciA9IE1hdGgucG93KGJpbmFyeS5iYXNlLCBwb3dlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFsdWUgKj0gKGJ5dGVzTXVsdGlwbGllciB8fCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgICAgICAgbnVtZXJhbC5yZWdpc3RlcignZm9ybWF0JywgJ2N1cnJlbmN5Jywge1xuICAgICAgICByZWdleHBzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IC8oXFwkKS9cbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlID0gbnVtZXJhbC5sb2NhbGVzW251bWVyYWwub3B0aW9ucy5jdXJyZW50TG9jYWxlXSxcbiAgICAgICAgICAgICAgICBzeW1ib2xzID0ge1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmU6IGZvcm1hdC5tYXRjaCgvXihbXFwrfFxcLXxcXCh8XFxzfFxcJF0qKS8pWzBdLFxuICAgICAgICAgICAgICAgICAgICBhZnRlcjogZm9ybWF0Lm1hdGNoKC8oW1xcK3xcXC18XFwpfFxcc3xcXCRdKikkLylbMF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBzeW1ib2wsXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgLy8gc3RyaXAgZm9ybWF0IG9mIHNwYWNlcyBhbmQgJFxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL1xccz9cXCRcXHM/LywgJycpO1xuXG4gICAgICAgICAgICAvLyBmb3JtYXQgdGhlIG51bWJlclxuICAgICAgICAgICAgb3V0cHV0ID0gbnVtZXJhbC5fLm51bWJlclRvRm9ybWF0KHZhbHVlLCBmb3JtYXQsIHJvdW5kaW5nRnVuY3Rpb24pO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGJlZm9yZSBhbmQgYWZ0ZXIgYmFzZWQgb24gdmFsdWVcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9scy5iZWZvcmUgPSBzeW1ib2xzLmJlZm9yZS5yZXBsYWNlKC9bXFwtXFwoXS8sICcnKTtcbiAgICAgICAgICAgICAgICBzeW1ib2xzLmFmdGVyID0gc3ltYm9scy5hZnRlci5yZXBsYWNlKC9bXFwtXFwpXS8sICcnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCAwICYmICghbnVtZXJhbC5fLmluY2x1ZGVzKHN5bWJvbHMuYmVmb3JlLCAnLScpICYmICFudW1lcmFsLl8uaW5jbHVkZXMoc3ltYm9scy5iZWZvcmUsICcoJykpKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9scy5iZWZvcmUgPSAnLScgKyBzeW1ib2xzLmJlZm9yZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGVhY2ggYmVmb3JlIHN5bWJvbFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN5bWJvbHMuYmVmb3JlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gc3ltYm9scy5iZWZvcmVbaV07XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN5bWJvbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICckJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG51bWVyYWwuXy5pbnNlcnQob3V0cHV0LCBsb2NhbGUuY3VycmVuY3kuc3ltYm9sLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG51bWVyYWwuXy5pbnNlcnQob3V0cHV0LCAnICcsIGkgKyBsb2NhbGUuY3VycmVuY3kuc3ltYm9sLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggZWFjaCBhZnRlciBzeW1ib2xcbiAgICAgICAgICAgIGZvciAoaSA9IHN5bWJvbHMuYWZ0ZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBzeW1ib2xzLmFmdGVyW2ldO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzeW1ib2wpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnJCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBpID09PSBzeW1ib2xzLmFmdGVyLmxlbmd0aCAtIDEgPyBvdXRwdXQgKyBsb2NhbGUuY3VycmVuY3kuc3ltYm9sIDogbnVtZXJhbC5fLmluc2VydChvdXRwdXQsIGxvY2FsZS5jdXJyZW5jeS5zeW1ib2wsIC0oc3ltYm9scy5hZnRlci5sZW5ndGggLSAoMSArIGkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBpID09PSBzeW1ib2xzLmFmdGVyLmxlbmd0aCAtIDEgPyBvdXRwdXQgKyAnICcgOiBudW1lcmFsLl8uaW5zZXJ0KG91dHB1dCwgJyAnLCAtKHN5bWJvbHMuYWZ0ZXIubGVuZ3RoIC0gKDEgKyBpKSArIGxvY2FsZS5jdXJyZW5jeS5zeW1ib2wubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuICAgICAgICBudW1lcmFsLnJlZ2lzdGVyKCdmb3JtYXQnLCAnZXhwb25lbnRpYWwnLCB7XG4gICAgICAgIHJlZ2V4cHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogLyhlXFwrfGUtKS8sXG4gICAgICAgICAgICB1bmZvcm1hdDogLyhlXFwrfGUtKS9cbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0LFxuICAgICAgICAgICAgICAgIGV4cG9uZW50aWFsID0gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhbnVtZXJhbC5fLmlzTmFOKHZhbHVlKSA/IHZhbHVlLnRvRXhwb25lbnRpYWwoKSA6ICcwZSswJyxcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IGV4cG9uZW50aWFsLnNwbGl0KCdlJyk7XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKC9lW1xcK3xcXC1dezF9MC8sICcnKTtcblxuICAgICAgICAgICAgb3V0cHV0ID0gbnVtZXJhbC5fLm51bWJlclRvRm9ybWF0KE51bWJlcihwYXJ0c1swXSksIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyAnZScgKyBwYXJ0c1sxXTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5mb3JtYXQ6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gbnVtZXJhbC5fLmluY2x1ZGVzKHN0cmluZywgJ2UrJykgPyBzdHJpbmcuc3BsaXQoJ2UrJykgOiBzdHJpbmcuc3BsaXQoJ2UtJyksXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBOdW1iZXIocGFydHNbMF0pLFxuICAgICAgICAgICAgICAgIHBvd2VyID0gTnVtYmVyKHBhcnRzWzFdKTtcblxuICAgICAgICAgICAgcG93ZXIgPSBudW1lcmFsLl8uaW5jbHVkZXMoc3RyaW5nLCAnZS0nKSA/IHBvd2VyICo9IC0xIDogcG93ZXI7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNiYWNrKGFjY3VtLCBjdXJyLCBjdXJySSwgTykge1xuICAgICAgICAgICAgICAgIHZhciBjb3JyRmFjdG9yID0gbnVtZXJhbC5fLmNvcnJlY3Rpb25GYWN0b3IoYWNjdW0sIGN1cnIpLFxuICAgICAgICAgICAgICAgICAgICBudW0gPSAoYWNjdW0gKiBjb3JyRmFjdG9yKSAqIChjdXJyICogY29yckZhY3RvcikgLyAoY29yckZhY3RvciAqIGNvcnJGYWN0b3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudW1lcmFsLl8ucmVkdWNlKFt2YWx1ZSwgTWF0aC5wb3coMTAsIHBvd2VyKV0sIGNiYWNrLCAxKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gICAgICAgIG51bWVyYWwucmVnaXN0ZXIoJ2Zvcm1hdCcsICdvcmRpbmFsJywge1xuICAgICAgICByZWdleHBzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IC8obykvXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24odmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSA9IG51bWVyYWwubG9jYWxlc1tudW1lcmFsLm9wdGlvbnMuY3VycmVudExvY2FsZV0sXG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgICAgIG9yZGluYWwgPSBudW1lcmFsLl8uaW5jbHVkZXMoZm9ybWF0LCAnIG8nKSA/ICcgJyA6ICcnO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBmb3Igc3BhY2UgYmVmb3JlXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgvXFxzP28vLCAnJyk7XG5cbiAgICAgICAgICAgIG9yZGluYWwgKz0gbG9jYWxlLm9yZGluYWwodmFsdWUpO1xuXG4gICAgICAgICAgICBvdXRwdXQgPSBudW1lcmFsLl8ubnVtYmVyVG9Gb3JtYXQodmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyBvcmRpbmFsO1xuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgICAgICAgbnVtZXJhbC5yZWdpc3RlcignZm9ybWF0JywgJ3BlcmNlbnRhZ2UnLCB7XG4gICAgICAgIHJlZ2V4cHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogLyglKS8sXG4gICAgICAgICAgICB1bmZvcm1hdDogLyglKS9cbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbih2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc3BhY2UgPSBudW1lcmFsLl8uaW5jbHVkZXMoZm9ybWF0LCAnICUnKSA/ICcgJyA6ICcnLFxuICAgICAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICAgICAgaWYgKG51bWVyYWwub3B0aW9ucy5zY2FsZVBlcmNlbnRCeTEwMCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKiAxMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZSBiZWZvcmUgJVxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoL1xccz9cXCUvLCAnJyk7XG5cbiAgICAgICAgICAgIG91dHB1dCA9IG51bWVyYWwuXy5udW1iZXJUb0Zvcm1hdCh2YWx1ZSwgZm9ybWF0LCByb3VuZGluZ0Z1bmN0aW9uKTtcblxuICAgICAgICAgICAgaWYgKG51bWVyYWwuXy5pbmNsdWRlcyhvdXRwdXQsICcpJykpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuc3BsaXQoJycpO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LnNwbGljZSgtMSwgMCwgc3BhY2UgKyAnJScpO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LmpvaW4oJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyBzcGFjZSArICclJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgdW5mb3JtYXQ6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICAgICAgdmFyIG51bWJlciA9IG51bWVyYWwuXy5zdHJpbmdUb051bWJlcihzdHJpbmcpO1xuICAgICAgICAgICAgaWYgKG51bWVyYWwub3B0aW9ucy5zY2FsZVBlcmNlbnRCeTEwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKiAwLjAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gICAgICAgIG51bWVyYWwucmVnaXN0ZXIoJ2Zvcm1hdCcsICd0aW1lJywge1xuICAgICAgICByZWdleHBzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IC8oOikvLFxuICAgICAgICAgICAgdW5mb3JtYXQ6IC8oOikvXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24odmFsdWUsIGZvcm1hdCwgcm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICAgICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcih2YWx1ZSAvIDYwIC8gNjApLFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh2YWx1ZSAtIChob3VycyAqIDYwICogNjApKSAvIDYwKSxcbiAgICAgICAgICAgICAgICBzZWNvbmRzID0gTWF0aC5yb3VuZCh2YWx1ZSAtIChob3VycyAqIDYwICogNjApIC0gKG1pbnV0ZXMgKiA2MCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gaG91cnMgKyAnOicgKyAobWludXRlcyA8IDEwID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXMpICsgJzonICsgKHNlY29uZHMgPCAxMCA/ICcwJyArIHNlY29uZHMgOiBzZWNvbmRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5mb3JtYXQ6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICAgICAgdmFyIHRpbWVBcnJheSA9IHN0cmluZy5zcGxpdCgnOicpLFxuICAgICAgICAgICAgICAgIHNlY29uZHMgPSAwO1xuXG4gICAgICAgICAgICAvLyB0dXJuIGhvdXJzIGFuZCBtaW51dGVzIGludG8gc2Vjb25kcyBhbmQgYWRkIHRoZW0gYWxsIHVwXG4gICAgICAgICAgICBpZiAodGltZUFycmF5Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIC8vIGhvdXJzXG4gICAgICAgICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgKyAoTnVtYmVyKHRpbWVBcnJheVswXSkgKiA2MCAqIDYwKTtcbiAgICAgICAgICAgICAgICAvLyBtaW51dGVzXG4gICAgICAgICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgKyAoTnVtYmVyKHRpbWVBcnJheVsxXSkgKiA2MCk7XG4gICAgICAgICAgICAgICAgLy8gc2Vjb25kc1xuICAgICAgICAgICAgICAgIHNlY29uZHMgPSBzZWNvbmRzICsgTnVtYmVyKHRpbWVBcnJheVsyXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVBcnJheS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBtaW51dGVzXG4gICAgICAgICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgKyAoTnVtYmVyKHRpbWVBcnJheVswXSkgKiA2MCk7XG4gICAgICAgICAgICAgICAgLy8gc2Vjb25kc1xuICAgICAgICAgICAgICAgIHNlY29uZHMgPSBzZWNvbmRzICsgTnVtYmVyKHRpbWVBcnJheVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHNlY29uZHMpO1xuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuXG5yZXR1cm4gbnVtZXJhbDtcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=